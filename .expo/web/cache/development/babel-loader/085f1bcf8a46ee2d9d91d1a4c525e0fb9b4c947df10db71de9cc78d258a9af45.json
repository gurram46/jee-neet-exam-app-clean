{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sai\\\\Downloads\\\\prototype1\\\\jee-neet-clean\\\\screens\\\\ExamScreen.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { Text, Button, Card, ProgressBar } from 'react-native-paper';\nimport { useNavigation, useRoute, useFocusEffect } from '@react-navigation/native';\nimport OptionButton from '../components/OptionButton';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport questionsData from '../data/questions.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExamScreen() {\n  const [loading, setLoading] = useState(true);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(60);\n  const [answers, setAnswers] = useState([]);\n  const navigation = useNavigation();\n  const route = useRoute();\n  const {\n    selectionType,\n    selectedItems\n  } = route.params;\n  useFocusEffect(useCallback(() => {\n    const onBackPress = () => true;\n    const subscription = BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return () => subscription?.remove();\n  }, []));\n  useEffect(() => {\n    setTimeout(() => {\n      let filteredQuestions = [];\n      if (selectionType === 'difficulty') {\n        filteredQuestions = questionsData.questions.filter(q => selectedItems.includes(q.difficulty));\n      } else if (selectionType === 'topics') {\n        filteredQuestions = questionsData.questions.filter(q => selectedItems.includes(q.topic));\n      }\n      const shuffled = filteredQuestions.sort(() => 0.5 - Math.random());\n      const selectedQuestions = shuffled.slice(0, 10);\n      setQuestions(selectedQuestions);\n      setAnswers(new Array(selectedQuestions.length).fill(null));\n      setLoading(false);\n    }, 2000);\n  }, [selectionType, selectedItems]);\n  useEffect(() => {\n    if (loading || questions.length === 0) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          handleNextQuestion();\n          return 60;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [currentQuestionIndex, loading, questions.length]);\n  const handleAnswerSelect = optionIndex => {\n    setSelectedAnswer(optionIndex);\n  };\n  const handleNextQuestion = () => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestionIndex] = selectedAnswer;\n    setAnswers(newAnswers);\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n      setSelectedAnswer(null);\n      setTimeLeft(60);\n    } else {\n      navigation.replace('Result', {\n        questions,\n        answers: newAnswers\n      });\n    }\n  };\n  if (loading) {\n    return _jsxDEV(LoadingSpinner, {\n      message: \"Preparing your exam...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n  if (questions.length === 0) {\n    return _jsxDEV(View, {\n      style: styles.container,\n      children: [_jsxDEV(Text, {\n        variant: \"headlineSmall\",\n        children: \"No questions found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), _jsxDEV(Button, {\n        onPress: () => navigation.goBack(),\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questions.length;\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(Text, {\n        variant: \"titleMedium\",\n        children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        variant: \"titleLarge\",\n        style: styles.timer,\n        children: [timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), _jsxDEV(ProgressBar, {\n      progress: progress,\n      style: styles.progressBar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), _jsxDEV(Card, {\n      style: styles.questionCard,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Text, {\n          variant: \"bodySmall\",\n          style: styles.topicText,\n          children: [currentQuestion.topic, \" \\u2022 \", currentQuestion.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          variant: \"titleMedium\",\n          style: styles.questionText,\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.optionsContainer,\n      children: currentQuestion.options.map((option, index) => _jsxDEV(OptionButton, {\n        option: `${String.fromCharCode(65 + index)}. ${option}`,\n        selected: selectedAnswer === index,\n        onPress: () => handleAnswerSelect(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.buttonContainer,\n      children: _jsxDEV(Button, {\n        mode: \"contained\",\n        onPress: handleNextQuestion,\n        style: styles.nextButton,\n        children: currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5'\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16\n  },\n  timer: {\n    color: '#f44336',\n    fontWeight: 'bold'\n  },\n  progressBar: {\n    marginBottom: 16,\n    height: 8\n  },\n  questionCard: {\n    marginBottom: 24\n  },\n  topicText: {\n    opacity: 0.7,\n    marginBottom: 8\n  },\n  questionText: {\n    lineHeight: 24\n  },\n  optionsContainer: {\n    flex: 1\n  },\n  buttonContainer: {\n    paddingTop: 16,\n    alignItems: 'center'\n  },\n  nextButton: {\n    minWidth: 120,\n    paddingVertical: 4\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useCallback","View","StyleSheet","BackHandler","Text","Button","Card","ProgressBar","useNavigation","useRoute","useFocusEffect","OptionButton","LoadingSpinner","questionsData","jsxDEV","_jsxDEV","ExamScreen","loading","setLoading","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timeLeft","setTimeLeft","answers","setAnswers","navigation","route","selectionType","selectedItems","params","onBackPress","subscription","addEventListener","remove","setTimeout","filteredQuestions","filter","q","includes","difficulty","topic","shuffled","sort","Math","random","selectedQuestions","slice","Array","length","fill","timer","setInterval","prev","handleNextQuestion","clearInterval","handleAnswerSelect","optionIndex","newAnswers","replace","message","fileName","_jsxFileName","lineNumber","columnNumber","style","styles","container","children","variant","onPress","goBack","currentQuestion","progress","header","progressBar","questionCard","Content","topicText","questionText","question","optionsContainer","options","map","option","index","String","fromCharCode","selected","buttonContainer","mode","nextButton","create","flex","padding","backgroundColor","flexDirection","justifyContent","alignItems","marginBottom","color","fontWeight","height","opacity","lineHeight","paddingTop","minWidth","paddingVertical"],"sources":["C:/Users/Sai/Downloads/prototype1/jee-neet-clean/screens/ExamScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { View, StyleSheet, BackHandler } from 'react-native';\r\nimport { Text, Button, Card, ProgressBar } from 'react-native-paper';\r\nimport { useNavigation, useRoute, useFocusEffect } from '@react-navigation/native';\r\nimport OptionButton from '../components/OptionButton';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport questionsData from '../data/questions.json';\r\n\r\nexport default function ExamScreen() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(60);\r\n  const [answers, setAnswers] = useState([]);\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const { selectionType, selectedItems } = route.params;\r\n\r\n  // Disable hardware back button - FIXED VERSION\r\n  useFocusEffect(\r\n    useCallback(() => {\r\n      const onBackPress = () => true; // Prevent going back\r\n      const subscription = BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n      return () => subscription?.remove(); // Use remove() instead of removeEventListener\r\n    }, [])\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Simulate loading and filter questions\r\n    setTimeout(() => {\r\n      let filteredQuestions = [];\r\n      \r\n      if (selectionType === 'difficulty') {\r\n        filteredQuestions = questionsData.questions.filter(\r\n          q => selectedItems.includes(q.difficulty)\r\n        );\r\n      } else if (selectionType === 'topics') {\r\n        filteredQuestions = questionsData.questions.filter(\r\n          q => selectedItems.includes(q.topic)\r\n        );\r\n      }\r\n      \r\n      // Shuffle and take up to 10 questions\r\n      const shuffled = filteredQuestions.sort(() => 0.5 - Math.random());\r\n      const selectedQuestions = shuffled.slice(0, 10);\r\n      \r\n      setQuestions(selectedQuestions);\r\n      setAnswers(new Array(selectedQuestions.length).fill(null));\r\n      setLoading(false);\r\n    }, 2000);\r\n  }, [selectionType, selectedItems]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    if (loading || questions.length === 0) return;\r\n    \r\n    const timer = setInterval(() => {\r\n      setTimeLeft(prev => {\r\n        if (prev <= 1) {\r\n          handleNextQuestion();\r\n          return 60;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [currentQuestionIndex, loading, questions.length]);\r\n\r\n  const handleAnswerSelect = (optionIndex) => {\r\n    setSelectedAnswer(optionIndex);\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    // Record answer\r\n    const newAnswers = [...answers];\r\n    newAnswers[currentQuestionIndex] = selectedAnswer;\r\n    setAnswers(newAnswers);\r\n    \r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n      setSelectedAnswer(null);\r\n      setTimeLeft(60);\r\n    } else {\r\n      // Exam finished\r\n      navigation.replace('Result', {\r\n        questions,\r\n        answers: newAnswers,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner message=\"Preparing your exam...\" />;\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text variant=\"headlineSmall\">No questions found</Text>\r\n        <Button onPress={() => navigation.goBack()}>Go Back</Button>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n  const progress = (currentQuestionIndex + 1) / questions.length;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text variant=\"titleMedium\">\r\n          Question {currentQuestionIndex + 1} of {questions.length}\r\n        </Text>\r\n        <Text variant=\"titleLarge\" style={styles.timer}>\r\n          {timeLeft}s\r\n        </Text>\r\n      </View>\r\n      \r\n      <ProgressBar progress={progress} style={styles.progressBar} />\r\n      \r\n      <Card style={styles.questionCard}>\r\n        <Card.Content>\r\n          <Text variant=\"bodySmall\" style={styles.topicText}>\r\n            {currentQuestion.topic} • {currentQuestion.difficulty}\r\n          </Text>\r\n          <Text variant=\"titleMedium\" style={styles.questionText}>\r\n            {currentQuestion.question}\r\n          </Text>\r\n        </Card.Content>\r\n      </Card>\r\n      \r\n      <View style={styles.optionsContainer}>\r\n        {currentQuestion.options.map((option, index) => (\r\n          <OptionButton\r\n            key={index}\r\n            option={`${String.fromCharCode(65 + index)}. ${option}`}\r\n            selected={selectedAnswer === index}\r\n            onPress={() => handleAnswerSelect(index)}\r\n          />\r\n        ))}\r\n      </View>\r\n      \r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          mode=\"contained\"\r\n          onPress={handleNextQuestion}\r\n          style={styles.nextButton}\r\n        >\r\n          {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}\r\n        </Button>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  timer: {\r\n    color: '#f44336',\r\n    fontWeight: 'bold',\r\n  },\r\n  progressBar: {\r\n    marginBottom: 16,\r\n    height: 8,\r\n  },\r\n  questionCard: {\r\n    marginBottom: 24,\r\n  },\r\n  topicText: {\r\n    opacity: 0.7,\r\n    marginBottom: 8,\r\n  },\r\n  questionText: {\r\n    lineHeight: 24,\r\n  },\r\n  optionsContainer: {\r\n    flex: 1,\r\n  },\r\n  buttonContainer: {\r\n    paddingTop: 16,\r\n    alignItems: 'center',\r\n  },\r\n  nextButton: {\r\n    minWidth: 120,\r\n    paddingVertical: 4,\r\n  },\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}